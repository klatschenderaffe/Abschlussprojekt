name: Terraform CI/CD Pipeline
on:
  workflow_run:
    workflows:
      - Frontend Image erstellen und pushen
    types:
      - completed
  workflow_dispatch:

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_run' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Show directory structure
        run: ls -la

      - name: Terraform Init
        working-directory: ./Terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./Terraform
        run: terraform apply -auto-approve

      - name: Install Ansible and boto3
        working-directory: ./Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible
          pip install boto3 botocore

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem

      - name: Ansible Python Script ausf√ºhrbar machen und probelaufen lassen
        working-directory: ./Ansible
        run: |
          chmod +x ./aws_inventory.py
          python ./aws_inventory.py

        # 3. Ansible Galaxy Rollen installieren
      - name: Install Ansible Galaxy roles
        working-directory: ./Ansible
        run: ansible-galaxy install -r requirements.yml

      - name: Run Ansible Playbook Frontend
        env:
          ANSIBLE_USER: ubuntu
          ANSIBLE_HOST_KEY_CHECKING: False
        working-directory: ./Ansible
        run: |
          ansible-playbook -i ./aws_inventory.py ./playbook.yml --ssh-common-args='-o StrictHostKeyChecking=no' -v

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
        continue-on-error: false

      - name: Docker Compose ausfuehren
        run: docker-compose ../docker-compose.yml up

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./Terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./Terraform
        run: terraform destroy -auto-approve
